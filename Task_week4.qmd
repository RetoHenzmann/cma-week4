---
title: "Task_week4"
format: html
editor: visual
---

# Preparation1:

```{r}
library("readr")
library("dplyr")
library("sf")
library("ggplot2")

wildschwein <- read_delim("wildschwein_BE_2056.csv", ",")

# Careful! What Timezone is assumed?
sabi <- wildschwein |>
    st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE) |>
    filter(TierName == "Sabi", DatetimeUTC >= "2015-07-01", DatetimeUTC < "2015-07-03")
```

# **Step a): Specify a temporal window v**

In the above dataset, the sampling interval is 15 minutes. If we take a temporal window of 60 minutes, that would mean including 4 fixes. We need to calculate the following Euclidean distances (pos representing single location):

1.  `pos[n-2]` to `pos[n]`

2.  `pos[n-1]` to `pos[n]`

3.  `pos[n]` to `pos[n+1]`

4.  `pos[n]` to `pos[n+2]`

# **Step b): Measure the distance from every point to every other point within this temporal window**

We can use the function distance_by_element from week 2 in combination with `lead()` and `lag()` to calculate the Euclidean distance. For example, to create the necessary offset of n-2, we use `lag(x, 2)`. For each offset, we create one individual column.

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

sabi <- sabi |>
    mutate(
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  # distance to pos -30 minutes
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  # distance to pos -15 minutes
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), # distance to pos +15 mintues
        nPlus2  = distance_by_element(geometry, lead(geometry, 2))  # distance to pos +30 minutes
    )
```

Now we want to calculate the mean distance of `nMinus2`, `nMinus1`, `nPlus1`, `nPlus2` for each row. Since we want the mean value *per Row*, we have to explicitly specify this before `mutate()` with the function `rowwise()`. To remove this rowwise-grouping, we end the operation with `ungroup()`.

Note that for the first two positions, we cannot calculate a `stepMean` since there is no Position `n-2` for these positions. This is also true for the last to positions (lacking a position `n+2`).

```{r}
sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

sabi
```

# **Step c): Remove "static points"**

We can now determine if an animal is moving or not by specifying a threshold distance on `stepMean`. In our example, we use the mean value as a threshold: Positions with distances below this value are considered static.

```{r}
sabi <- sabi |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

sabi_filter |>
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Preparation2:

loading tracking Data:

```{r}
data <- read_delim("Daten_Bewegung.csv")

#So modifizieren, damit man nur noch die benötigten Daten hat

data$user_id <- NULL
data$weekday <- NULL
data$place_name <- NULL
data$transport_mode <- NULL

View(data)
```

Now set the coordinate system to EPSG 2056

```{r}
d_move <- data |>
  st_as_sf(coords = c("lon_x", "lat_y"), crs = 2056, remove = FALSE) |>
  filter(datetime >= "2024-04-05", datetime < "2024-04-06")
```

# Task 1: Segmentation

## **Step a): Specify a temporal window v**

The movement data has a sampling interval of 15 seconds. So to stick to the 4 fixes, we calculate the euclidean distance for a window of 1 minute

1.  `pos[n-2]` to `pos[n]`

2.  `pos[n-1]` to `pos[n]`

3.  `pos[n]` to `pos[n+1]`

4.  `pos[n]` to `pos[n+2]`

## **Step b): Measure the distance from every point to every other point within this temporal window**

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

d_move <- d_move |>
    mutate(
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  # distance to pos -30 seconds
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  # distance to pos -15 seconds
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), # distance to pos +15 seconds
        nPlus2  = distance_by_element(geometry, lead(geometry, 2))  # distance to pos +30 seconds
    )
```

Now we want to calculate the mean distance of `nMinus2`, `nMinus1`, `nPlus1`, `nPlus2` for each row. Since we want the mean value *per Row*, we have to explicitly specify this before `mutate()` with the function `rowwise()`. To remove this rowwise-grouping, we end the operation with `ungroup()`.

```{r}
d_move <- d_move |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

```

# **Task 2 und 3: Specify and apply threshold *d:***

```{r}
d_move <- d_move |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

move_filter <- d_move |>
    filter(!static)

move_filter |>
    ggplot(aes(lon_x, lat_y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

```{r}
ggplot(d_move, aes(lon_x,lat_y, color =static))+
  geom_point()+
  geom_path()+
  coord_fixed()
```

# Task 4: Segment-based analysis:

```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
}
```

```{r}
d_move <- d_move |>
  mutate(segment_id = rle_id(static))

ggplot(d_move, aes(lon_x,lat_y, color =segment_id))+
  geom_point()+
  geom_path()+
  coord_fixed()
```

# Task 5: Similarity measures

We will now calculate similarties between trajectories using a new dataset [pedestrian.csv](https://moodle.zhaw.ch/mod/folder/view.php?id=1192125). Download an import this dataset as a `data.frame` or `tibble`. It it a set of six different but similar trajectories from pedendefinedstrians walking on a path.

For this task, explore the trajectories first and get an idea on how the pedestrians moved

```{r}
pedestrian <- read_delim("pedestrian.csv")

ggplot(pedestrian, aes(x = E, y = N, color = factor(TrajID))) +
  geom_point() +
  geom_path() +
  coord_fixed() +
  scale_color_viridis_d(option = "viridis") + 
  labs(title = "Visual comparison of the 6 trajectories",
       subtitle = "Each subplot highlights a trajectory",
       x = "E",
       y = "N",
       color = "Trajectory ID") +
  theme_minimal() +
  theme(legend.position = "none") +  
  facet_wrap(~ TrajID, ncol = 3) 
```

# Task 6: Calculate similarity:

```{r}
library(SimilarityMeasures)
help(package = "SimilarityMeasures")
```

```{r}
trajectory_list <- split(pedestrian, pedestrian$TrajID) %>%
  lapply(function(df) {
    as.matrix(df[, c("E", "N")])
  })


trajectory1 <- trajectory_list[[1]]


results_df <- data.frame(Trajectory = integer(), Measure = character(), Value = numeric(), stringsAsFactors = FALSE)


for (i in 2:length(trajectory_list)) {
  traj <- trajectory_list[[i]]
  

  dtw_result <- DTW(trajectory1, traj)
  editDist_result <- EditDist(trajectory1, traj)
  frechet_result <- Frechet(trajectory1, traj)
  lcss_result <- LCSS(trajectory1, traj, pointSpacing = 1, pointDistance = 0.1, errorMarg = 0.1)
  

  results_df <- rbind(results_df, data.frame(Trajectory = paste("Trajectory", i),
                                             Measure = "DTW",
                                             Value = dtw_result))
  results_df <- rbind(results_df, data.frame(Trajectory = paste("Trajectory", i),
                                             Measure = "EditDist",
                                             Value = editDist_result))
  results_df <- rbind(results_df, data.frame(Trajectory = paste("Trajectory", i),
                                             Measure = "Frechet",
                                             Value = frechet_result))
  results_df <- rbind(results_df, data.frame(Trajectory = paste("Trajectory", i),
                                             Measure = "LCSS",
                                             Value = lcss_result))
}





if (!("Measure" %in% names(results_df))) {
  results_df <- melt(results_df, id.vars = "Trajectory", variable.name = "Measure", value.name = "Value")
}


measure_colors <- c("DTW" = "red", "EditDist" = "green", "Frechet" = "blue", "LCSS" = "purple")

# Plot
plot <- ggplot(results_df, aes(x = as.factor(Trajectory), y = Value, fill = Measure)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
  scale_fill_manual(values = measure_colors) +
  facet_wrap(~ Measure, scales = "free_y") +  
  labs(title = "Computed Similarities Using Different Measures",
       x = "Comparison Trajectory",
       y = "Value") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    strip.background = element_blank(),
    strip.text.x = element_text(size = 13, face = "bold"),
    legend.position = "none", 
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Print the plot
print(plot)
```
