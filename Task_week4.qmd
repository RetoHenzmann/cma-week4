---
title: "Task_week4"
format: html
editor: visual
---

# Preparation1:

```{r}
library("readr")
library("dplyr")
library("sf")
library("ggplot2")

wildschwein <- read_delim("wildschwein_BE_2056.csv", ",")

# Careful! What Timezone is assumed?
sabi <- wildschwein |>
    st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE) |>
    filter(TierName == "Sabi", DatetimeUTC >= "2015-07-01", DatetimeUTC < "2015-07-03")
```

# **Step a): Specify a temporal window v**

In the above dataset, the sampling interval is 15 minutes. If we take a temporal window of 60 minutes, that would mean including 4 fixes. We need to calculate the following Euclidean distances (pos representing single location):

1.  `pos[n-2]` to `pos[n]`

2.  `pos[n-1]` to `pos[n]`

3.  `pos[n]` to `pos[n+1]`

4.  `pos[n]` to `pos[n+2]`

# **Step b): Measure the distance from every point to every other point within this temporal window**

We can use the function distance_by_element from week 2 in combination with `lead()` and `lag()` to calculate the Euclidean distance. For example, to create the necessary offset of n-2, we use `lag(x, 2)`. For each offset, we create one individual column.

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

sabi <- sabi |>
    mutate(
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  # distance to pos -30 minutes
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  # distance to pos -15 minutes
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), # distance to pos +15 mintues
        nPlus2  = distance_by_element(geometry, lead(geometry, 2))  # distance to pos +30 minutes
    )
```

Now we want to calculate the mean distance of `nMinus2`, `nMinus1`, `nPlus1`, `nPlus2` for each row. Since we want the mean value *per Row*, we have to explicitly specify this before `mutate()` with the function `rowwise()`. To remove this rowwise-grouping, we end the operation with `ungroup()`.

Note that for the first two positions, we cannot calculate a `stepMean` since there is no Position `n-2` for these positions. This is also true for the last to positions (lacking a position `n+2`).

```{r}
sabi <- sabi |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, nPlus1, nPlus2))
    ) |>
    ungroup()

sabi
```

# **Step c): Remove "static points"**

We can now determine if an animal is moving or not by specifying a threshold distance on `stepMean`. In our example, we use the mean value as a threshold: Positions with distances below this value are considered static.

```{r}
sabi <- sabi |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |>
    filter(!static)

sabi_filter |>
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Preparation2:

loading tracking Data:

```{r}
data <- read_delim("Daten_Bewegung.csv")

#So modifizieren, damit man nur noch die benötigten Daten hat

data$user_id <- NULL
data$weekday <- NULL
data$place_name <- NULL
data$transport_mode <- NULL

View(data)
```

Now set the coordinate system to EPSG 2056

```{r}
d_move <- data |>
  st_as_sf(coords = c("lon_x", "lat_y"), crs = 2056, remove = FALSE) |>
  filter(datetime >= "2024-04-05", datetime < "2024-04-06")
```

# Task 1: Segmentation

## **Step a): Specify a temporal window v**

The movement data has a sampling interval of 15 seconds. So to stick to the 4 fixes, we calculate the euclidean distance for a window of 1 minute

1.  `pos[n-2]` to `pos[n]`

2.  `pos[n-1]` to `pos[n]`

3.  `pos[n]` to `pos[n+1]`

4.  `pos[n]` to `pos[n+2]`

## **Step b): Measure the distance from every point to every other point within this temporal window**

```{r}
distance_by_element <- function(later, now) {
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
}

d_move <- d_move |>
    mutate(
        nMinus2 = distance_by_element(lag(geometry, 2), geometry),  # distance to pos -30 seconds
        nMinus1 = distance_by_element(lag(geometry, 1), geometry),  # distance to pos -15 seconds
        nPlus1  = distance_by_element(geometry, lead(geometry, 1)), # distance to pos +15 seconds
        nPlus2  = distance_by_element(geometry, lead(geometry, 2))  # distance to pos +30 seconds
    )
```
